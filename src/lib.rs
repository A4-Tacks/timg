pub const DEFAULT_COLORS: &str =
"48;2;0;0;0:48;5;16,\
48;2;0;0;95:48;5;17,\
48;2;0;0;135:48;5;18,\
48;2;0;0;175:48;5;19,\
48;2;0;0;215:48;5;20,\
48;2;0;0;255:48;5;21,\
48;2;0;95;0:48;5;22,\
48;2;0;95;95:48;5;23,\
48;2;0;95;135:48;5;24,\
48;2;0;95;175:48;5;25,\
48;2;0;95;215:48;5;26,\
48;2;0;95;255:48;5;27,\
48;2;0;135;0:48;5;28,\
48;2;0;135;95:48;5;29,\
48;2;0;135;135:48;5;30,\
48;2;0;135;175:48;5;31,\
48;2;0;135;215:48;5;32,\
48;2;0;135;255:48;5;33,\
48;2;0;175;0:48;5;34,\
48;2;0;175;95:48;5;35,\
48;2;0;175;135:48;5;36,\
48;2;0;175;175:48;5;37,\
48;2;0;175;215:48;5;38,\
48;2;0;175;255:48;5;39,\
48;2;0;215;0:48;5;40,\
48;2;0;215;95:48;5;41,\
48;2;0;215;135:48;5;42,\
48;2;0;215;175:48;5;43,\
48;2;0;215;215:48;5;44,\
48;2;0;215;255:48;5;45,\
48;2;0;255;0:48;5;46,\
48;2;0;255;95:48;5;47,\
48;2;0;255;135:48;5;48,\
48;2;0;255;175:48;5;49,\
48;2;0;255;215:48;5;50,\
48;2;0;255;255:48;5;51,\
48;2;95;0;0:48;5;52,\
48;2;95;0;95:48;5;53,\
48;2;95;0;135:48;5;54,\
48;2;95;0;175:48;5;55,\
48;2;95;0;215:48;5;56,\
48;2;95;0;255:48;5;57,\
48;2;95;95;0:48;5;58,\
48;2;95;95;95:48;5;59,\
48;2;95;95;135:48;5;60,\
48;2;95;95;175:48;5;61,\
48;2;95;95;215:48;5;62,\
48;2;95;95;255:48;5;63,\
48;2;95;135;0:48;5;64,\
48;2;95;135;95:48;5;65,\
48;2;95;135;135:48;5;66,\
48;2;95;135;175:48;5;67,\
48;2;95;135;215:48;5;68,\
48;2;95;135;255:48;5;69,\
48;2;95;175;0:48;5;70,\
48;2;95;175;95:48;5;71,\
48;2;95;175;135:48;5;72,\
48;2;95;175;175:48;5;73,\
48;2;95;175;215:48;5;74,\
48;2;95;175;255:48;5;75,\
48;2;95;215;0:48;5;76,\
48;2;95;215;95:48;5;77,\
48;2;95;215;135:48;5;78,\
48;2;95;215;175:48;5;79,\
48;2;95;215;215:48;5;80,\
48;2;95;215;255:48;5;81,\
48;2;95;255;0:48;5;82,\
48;2;95;255;95:48;5;83,\
48;2;95;255;135:48;5;84,\
48;2;95;255;175:48;5;85,\
48;2;95;255;215:48;5;86,\
48;2;95;255;255:48;5;87,\
48;2;135;0;0:48;5;88,\
48;2;135;0;95:48;5;89,\
48;2;135;0;135:48;5;90,\
48;2;135;0;175:48;5;91,\
48;2;135;0;215:48;5;92,\
48;2;135;0;255:48;5;93,\
48;2;135;95;0:48;5;94,\
48;2;135;95;95:48;5;95,\
48;2;135;95;135:48;5;96,\
48;2;135;95;175:48;5;97,\
48;2;135;95;215:48;5;98,\
48;2;135;95;255:48;5;99,\
48;2;135;135;0:48;5;100,\
48;2;135;135;95:48;5;101,\
48;2;135;135;135:48;5;102,\
48;2;135;135;175:48;5;103,\
48;2;135;135;215:48;5;104,\
48;2;135;135;255:48;5;105,\
48;2;135;175;0:48;5;106,\
48;2;135;175;95:48;5;107,\
48;2;135;175;135:48;5;108,\
48;2;135;175;175:48;5;109,\
48;2;135;175;215:48;5;110,\
48;2;135;175;255:48;5;111,\
48;2;135;215;0:48;5;112,\
48;2;135;215;95:48;5;113,\
48;2;135;215;135:48;5;114,\
48;2;135;215;175:48;5;115,\
48;2;135;215;215:48;5;116,\
48;2;135;215;255:48;5;117,\
48;2;135;255;0:48;5;118,\
48;2;135;255;95:48;5;119,\
48;2;135;255;135:48;5;120,\
48;2;135;255;175:48;5;121,\
48;2;135;255;215:48;5;122,\
48;2;135;255;255:48;5;123,\
48;2;175;0;0:48;5;124,\
48;2;175;0;95:48;5;125,\
48;2;175;0;135:48;5;126,\
48;2;175;0;175:48;5;127,\
48;2;175;0;215:48;5;128,\
48;2;175;0;255:48;5;129,\
48;2;175;95;0:48;5;130,\
48;2;175;95;95:48;5;131,\
48;2;175;95;135:48;5;132,\
48;2;175;95;175:48;5;133,\
48;2;175;95;215:48;5;134,\
48;2;175;95;255:48;5;135,\
48;2;175;135;0:48;5;136,\
48;2;175;135;95:48;5;137,\
48;2;175;135;135:48;5;138,\
48;2;175;135;175:48;5;139,\
48;2;175;135;215:48;5;140,\
48;2;175;135;255:48;5;141,\
48;2;175;175;0:48;5;142,\
48;2;175;175;95:48;5;143,\
48;2;175;175;135:48;5;144,\
48;2;175;175;175:48;5;145,\
48;2;175;175;215:48;5;146,\
48;2;175;175;255:48;5;147,\
48;2;175;215;0:48;5;148,\
48;2;175;215;95:48;5;149,\
48;2;175;215;135:48;5;150,\
48;2;175;215;175:48;5;151,\
48;2;175;215;215:48;5;152,\
48;2;175;215;255:48;5;153,\
48;2;175;255;0:48;5;154,\
48;2;175;255;95:48;5;155,\
48;2;175;255;135:48;5;156,\
48;2;175;255;175:48;5;157,\
48;2;175;255;215:48;5;158,\
48;2;175;255;255:48;5;159,\
48;2;215;0;0:48;5;160,\
48;2;215;0;95:48;5;161,\
48;2;215;0;135:48;5;162,\
48;2;215;0;175:48;5;163,\
48;2;215;0;215:48;5;164,\
48;2;215;0;255:48;5;165,\
48;2;215;95;0:48;5;166,\
48;2;215;95;95:48;5;167,\
48;2;215;95;135:48;5;168,\
48;2;215;95;175:48;5;169,\
48;2;215;95;215:48;5;170,\
48;2;215;95;255:48;5;171,\
48;2;215;135;0:48;5;172,\
48;2;215;135;95:48;5;173,\
48;2;215;135;135:48;5;174,\
48;2;215;135;175:48;5;175,\
48;2;215;135;215:48;5;176,\
48;2;215;135;255:48;5;177,\
48;2;215;175;0:48;5;178,\
48;2;215;175;95:48;5;179,\
48;2;215;175;135:48;5;180,\
48;2;215;175;175:48;5;181,\
48;2;215;175;215:48;5;182,\
48;2;215;175;255:48;5;183,\
48;2;215;215;0:48;5;184,\
48;2;215;215;95:48;5;185,\
48;2;215;215;135:48;5;186,\
48;2;215;215;175:48;5;187,\
48;2;215;215;215:48;5;188,\
48;2;215;215;255:48;5;189,\
48;2;215;255;0:48;5;190,\
48;2;215;255;95:48;5;191,\
48;2;215;255;135:48;5;192,\
48;2;215;255;175:48;5;193,\
48;2;215;255;215:48;5;194,\
48;2;215;255;255:48;5;195,\
48;2;255;0;0:48;5;196,\
48;2;255;0;95:48;5;197,\
48;2;255;0;135:48;5;198,\
48;2;255;0;175:48;5;199,\
48;2;255;0;215:48;5;200,\
48;2;255;0;255:48;5;201,\
48;2;255;95;0:48;5;202,\
48;2;255;95;95:48;5;203,\
48;2;255;95;135:48;5;204,\
48;2;255;95;175:48;5;205,\
48;2;255;95;215:48;5;206,\
48;2;255;95;255:48;5;207,\
48;2;255;135;0:48;5;208,\
48;2;255;135;95:48;5;209,\
48;2;255;135;135:48;5;210,\
48;2;255;135;175:48;5;211,\
48;2;255;135;215:48;5;212,\
48;2;255;135;255:48;5;213,\
48;2;255;175;0:48;5;214,\
48;2;255;175;95:48;5;215,\
48;2;255;175;135:48;5;216,\
48;2;255;175;175:48;5;217,\
48;2;255;175;215:48;5;218,\
48;2;255;175;255:48;5;219,\
48;2;255;215;0:48;5;220,\
48;2;255;215;95:48;5;221,\
48;2;255;215;135:48;5;222,\
48;2;255;215;175:48;5;223,\
48;2;255;215;215:48;5;224,\
48;2;255;215;255:48;5;225,\
48;2;255;255;0:48;5;226,\
48;2;255;255;95:48;5;227,\
48;2;255;255;135:48;5;228,\
48;2;255;255;175:48;5;229,\
48;2;255;255;215:48;5;230,\
48;2;255;255;255:48;5;231,\
48;2;8;8;8:48;5;232,\
48;2;18;18;18:48;5;233,\
48;2;28;28;28:48;5;234,\
48;2;38;38;38:48;5;235,\
48;2;48;48;48:48;5;236,\
48;2;58;58;58:48;5;237,\
48;2;68;68;68:48;5;238,\
48;2;78;78;78:48;5;239,\
48;2;88;88;88:48;5;240,\
48;2;98;98;98:48;5;241,\
48;2;108;108;108:48;5;242,\
48;2;118;118;118:48;5;243,\
48;2;128;128;128:48;5;244,\
48;2;138;138;138:48;5;245,\
48;2;148;148;148:48;5;246,\
48;2;158;158;158:48;5;247,\
48;2;168;168;168:48;5;248,\
48;2;178;178;178:48;5;249,\
48;2;188;188;188:48;5;250,\
48;2;198;198;198:48;5;251,\
48;2;208;208;208:48;5;252,\
48;2;218;218;218:48;5;253,\
48;2;228;228;228:48;5;254,\
48;2;238;238;238:48;5;255";


pub const ESC: char = '\x1b';
pub const CR: &str = "\n";


#[macro_export]
macro_rules! min {
    ( $a:expr, $b:expr )
        => (if $a < $b {$a} else {$b});
}

#[macro_export]
macro_rules! max {
    ( $a:expr, $b:expr )
        => (if $a > $b {$a} else {$b});
}

#[macro_export]
macro_rules! pass {
    ($a:tt < $( $x:tt )* ) => ($a);
    ( $( $x:tt )* ) => ($( $x )*);
}

#[doc = r#"
Examples:
```
let a = (0, 1, 2);
let b = (0, 1, 2);
assert!(timg::compare_items!((a, b) : (0, 1, 2), (x, y) => {x == y}));
```
"#]
#[macro_export]
macro_rules! compare_items {
    ( ($a:tt, $b:tt) : ($( $i:tt ),+), ($p1:tt, $p2:tt) => $op:block)
        => {
            true $(&& {
                let ($p1, $p2) = ($a.$i, $b.$i);
                $op
            })+
        }
}

#[doc = "
Examples
```
use timg::default_value;
let a = 0.0;
let result = 5.0 / default_value!(a => 0.0, 1.0);
assert_eq!(result, 5_f32);
```
"]
#[macro_export]
macro_rules! default_value {
    ( $x:expr => $v:expr , $default:expr )
        => (if $x != $v { $x } else { $default });
}

#[doc = r#"
Examples:
```
use timg::join_str;
use timg::pass;
let a = 2;
let b = "hello";
assert_eq!(join_str!("hi,", a, b), "hi,2hello");
```
"#]
#[macro_export]
macro_rules! join_str {
    ( $( $x:expr ),+ ) => (format!(concat!($(pass!("{}" < $x)),+), $($x),+));
}

pub fn image_size(
    osize: (u32, u32), 
    tsize: (u32, u32),
    e_val: u32)
-> (u32, u32)
{
    //! osize: input
    //! tsize: target size
    //! e_val: empty val
    //! Examples
    //! ```
    //! use timg::image_size;
    //! let a = image_size((5, 8), (9, 0), 0);
    //! assert_eq!(a, (9, 14));
    //!
    //! let a = image_size((8, 4), (11, 0), 0);
    //! assert_eq!(a, (11, 5));
    //!
    //! let a = image_size((5, 8), (0, 16), 0);
    //! assert_eq!(a, (10, 16));
    //!
    //! let a = image_size((8, 4), (0, 11), 0);
    //! assert_eq!(a, (22, 11));
    //!
    //! let a = image_size((8, 4), (3, 3), 0);
    //! assert_eq!(a, (3, 1));
    //!
    //! let a = image_size((8, 4), (0, 0), 0);
    //! assert_eq!(a, (0, 0));
    //!
    //! let a = image_size((0, 4), (0, 0), 0);
    //! assert_eq!(a, (0, 0));
    //! ```
    let (a, b): (f64, f64)
                 = (default_value!(osize.0 => 0, 1) as f64,
                  default_value!(osize.1 => 0, 1) as f64);
    let (a1, b1): (f64, f64)
                   = (tsize.0 as f64, tsize.1 as f64);
    let scale: f64 = if tsize.0 == e_val {
        b1 / b
    } else if tsize.1 == e_val {
        a1 / a
    } else {
        min!(a1 / a, b1 / b)
    };
    ((a * scale) as u32,
        (b * scale) as u32)
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub struct Rgb(pub u8, pub u8, pub u8);
impl Rgb {
    pub fn new() -> Self {
        Self (0, 0, 0)
    }
    pub fn is_similar(&self, other: Rgb, opt: u8) -> bool {
        //! 比较自身与目标是否相似
        //! opt: 误差程度
        //! Examples:
        //! ```
        //! use timg::Rgb;
        //! let a = Rgb::from((180, 231, 99));
        //! let b = Rgb::from((178, 229, 101));
        //! assert!(a.is_similar(b, 2));
        //!
        //! let a = Rgb::from((0, 231, 99));
        //! let b = Rgb::from((181, 231, 100));
        //! assert!(! a.is_similar(b, 0));
        //! ```
        compare_items!((self, other) : (0, 1, 2), (x, y) => {
            (if x < opt {u8::MIN} else {x - opt})
                <= y && y <=
            (if x > u8::MAX - opt {u8::MAX} else {x + opt})
        })
    }
    pub fn get(&self) -> (u8, u8, u8) {
        (self.0, self.1, self.2)
    }
    pub fn set(&mut self, color: (u8, u8, u8)) {
        (self.0, self.1, self.2) = color
    }
    pub fn set_from_rgba(&mut self, fg: (u8, u8, u8, u8)) {
        //! Examples:
        //! ```
        //! use timg::Rgb;
        //! let mut c = Rgb::new();
        //! c.set((2, 3, 9));
        //! c.set_from_rgba((150, 8, 72, 96));
        //! assert_eq!(c, Rgb::from((57, 4, 32)));
        //! ```
        macro_rules! to {
            ( $($x:expr ),+ ) => ( ($($x as f64 / 255.0),+) );
        }
        macro_rules! merge {
            ($bg:tt, $fg:expr, $( $t:tt ),+)
                => {{
                    let fga: f64 = to!($fg.3);
                    ($(
                        {
                            let (bg, fg): (f64, f64) = to!($bg.$t, $fg.$t);
                            ((fg * fga + bg * (1.0 - fga)) * 255.0) as u8
                        }
                    ),+)
                }};
        }
        self.set(merge!(self, fg, 0, 1, 2))
    }
}
impl From<(u8, u8, u8)> for Rgb {
    fn from(o: (u8, u8, u8)) -> Self {
        //! Examples:
        //! ```
        //! use timg::Rgb;
        //! let mut a = Rgb::new();
        //! a.set((2, 8, 18));
        //! assert_eq!(a, Rgb::from((2, 8, 18)))
        //! ```
        let mut a = Self::new();
        a.set(o);
        a
    }
}

pub fn base16_to_unum(s: &str) -> Option<u32> {
    //! Examples:
    //! ```
    //! use timg::base16_to_unum;
    //! let n = base16_to_unum("abfF14");
    //! assert_eq!(n, Some(0xabff14));
    //! ```
    let mut num: u32 = 0;
    for i in s.chars() {
        num <<= 4;
        num |= match i {
            '0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4,
            '5' => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9,
            'a'|'A' => 10, 'b'|'B' => 11, 'c'|'C' => 12,
            'd'|'D' => 13, 'e'|'E' => 14, 'f'|'F' => 15,
            _ => {
                return None;
            },
        };
    }
    Some(num)
}

pub fn num_to_rgb(num: u32) -> (u8, u8, u8) {
    //! Examples:
    //! ```
    //! use timg::num_to_rgb;
    //! assert_eq!(num_to_rgb(0xff0084), (0xff, 0x00, 0x84));
    //! ```
    debug_assert!(num <= 0xffffff);

    (((num >> 16) & 0xff) as u8,
     ((num >> 8) & 0xff) as u8,
     (num & 0xff) as u8)
}
